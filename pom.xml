<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
	    <groupId>org.springframework.boot</groupId>
	    <artifactId>spring-boot-starter-parent</artifactId>
	    <version>2.3.2.RELEASE</version>
	</parent>
	<groupId>com.philippines.gambling</groupId>
	<artifactId>gambling-baccarat</artifactId>
	<name>gambling-baccarat</name>
	<description>gambling-baccarat</description>
	
	<properties>
		<!-- 默认所有模块都执行 repackage -->
		<skip.repackage>false</skip.repackage>
		
		<!-- jdk -->
		<java.version>1.8</java.version>
		<bcprov-jdk15on.version>1.59</bcprov-jdk15on.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		
		<!-- maven -->
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
		
		<!-- common -->
		<commons-codec.version>1.15</commons-codec.version>
		<commons-lang.version>2.6</commons-lang.version>
		<jsoup.version>1.13.1</jsoup.version>
		<fastjson.version>1.2.83</fastjson.version>
		<jackson-core.version>2.13.0</jackson-core.version>
		<jackson-databind.version>2.13.0</jackson-databind.version>
		
		<!-- encrypt/decrypt -->
		<bcprov-jdk18on.version>1.76</bcprov-jdk18on.version>
		<spongycastle.version>1.56.0.0</spongycastle.version>
		
		<!-- tools -->
		<lombok.version>1.18.16</lombok.version>
		<hutool-all.version>5.5.7</hutool-all.version>
		<poi-ooxml.version>4.1.2</poi-ooxml.version>
		<poi-ooxml-schemas.version>4.1.2</poi-ooxml-schemas.version>
		<zxing.core.version>2.2</zxing.core.version>
		<zxing.javase.version>2.2</zxing.javase.version>
		<baidu.aip.version>4.15.5</baidu.aip.version>
		<kaptcha.version>2.3.2</kaptcha.version>
		<batik-all.version>1.14</batik-all.version>
		<lzma-java.version>1.3</lzma-java.version>
		<easyexcel.version>3.3.3</easyexcel.version>
		<hashids.version>1.0.1</hashids.version>
		
		<!-- rpc -->
		<fst.version>2.57</fst.version>
		<feign-httpclient.version>11.0</feign-httpclient.version>
		<netty-all.version>4.1.58.Final</netty-all.version>
		
		<!-- api -->
		<knife4j.version>2.0.7</knife4j.version>
		
		<!-- http -->
		<jwt.version>0.9.1</jwt.version>
		<javax.servlet-api.version>4.0.1</javax.servlet-api.version>
		<squareup.okhttp3.version>4.9.1</squareup.okhttp3.version>
		
		<!-- spring -->
		<snakeyaml.version>1.27</snakeyaml.version>
		<cglib-nodep.version>3.3.0</cglib-nodep.version>
		<aspectjweaver.version>1.9.6</aspectjweaver.version>
		<spring.validation.version>2.4.5</spring.validation.version>
		<spring.actuator.version>2.2.5.RELEASE</spring.actuator.version>
		<spring-boot-maven-plugin.version>2.3.8.RELEASE</spring-boot-maven-plugin.version>
		<spring-boot-starter-web.version>2.3.8.RELEASE</spring-boot-starter-web.version>
		<spring-boot-starter-jdbc.version>2.3.8.RELEASE</spring-boot-starter-jdbc.version>
		<spring-boot-starter-tomcat.version>2.4.2</spring-boot-starter-tomcat.version>
		<spring-boot-autoconfigure.version>2.3.8.RELEASE</spring-boot-autoconfigure.version>
		<spring-cloud-commons.version>2.2.6.RELEASE</spring-cloud-commons.version>
		<spring-cloud-starter-openfeign.version>2.2.6.RELEASE</spring-cloud-starter-openfeign.version>
		
		<!-- lock/distributed-lock -->
		<redisson.version>3.22.1</redisson.version>
		<shedlock-provider-jdbc-template.version>2.5.0</shedlock-provider-jdbc-template.version>
		<shedlock-spring.version>2.5.0</shedlock-spring.version>
		
		<!-- mysql -->
		<druid.version>1.2.8</druid.version>
		<mysql.version>8.0.23</mysql.version>
		<mybatis-plus.version>3.5.2</mybatis-plus.version>
		
		<!-- mybatis-plus + shardingsphere -->
		<mysql-connector-java.version>8.0.29</mysql-connector-java.version>
		<mybatis-plus-boot-starter.version>3.1.2</mybatis-plus-boot-starter.version>
		<velocity-engine-core.version>2.2</velocity-engine-core.version>
		<mybatis-plus-generator.version>3.4.0</mybatis-plus-generator.version>
		<pagehelper-spring-boot-starter.version>1.2.13</pagehelper-spring-boot-starter.version>
		<sharding-sphere.version>4.1.1</sharding-sphere.version>
		
		
		<!-- test -->
		<junit.version>3.8.1</junit.version>
		<tess4j.version>5.7.0</tess4j.version>
		
		<!-- tomcat -->
		<tomcat-embed-core.version>9.0.41</tomcat-embed-core.version>
		
		<!-- log -->
		<slf4j-api.version>1.7.30</slf4j-api.version>
		<logback-core.version>1.2.3</logback-core.version>
		<logback-classic.version>1.2.3</logback-classic.version>
		<logging-interceptor.version>3.4.1</logging-interceptor.version>
		
		<!-- maven package -->
		<output.dependence.file.path>lib/</output.dependence.file.path>
		<output.resource.file.path>resources/</output.resource.file.path>
	</properties>

	<dependencies>
	
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>
		<dependency>
			<groupId>cn.hutool</groupId>
			<artifactId>hutool-all</artifactId>
			<version>5.8.28</version>
		</dependency>
		<dependency>
		    <groupId>com.alipay.sofa</groupId>
		    <artifactId>runtime-sofa-boot-starter</artifactId>
		</dependency>
		
		
		<dependency>
		    <groupId>org.yaml</groupId>
		    <artifactId>snakeyaml</artifactId>
		</dependency>
		
		
		<dependency>
		    <groupId>ch.qos.logback</groupId>
		    <artifactId>logback-classic</artifactId>
		</dependency>
		<dependency>
		    <groupId>ch.qos.logback</groupId>
		    <artifactId>logback-core</artifactId>
		</dependency>
		
		
		<dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
		</dependency>
		<dependency>
			<groupId>org.junit.vintage</groupId>
			<artifactId>junit-vintage-engine</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>2.3.8.RELEASE</version>
				<type>pom</type>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>com.alipay.sofa</groupId>
			    <artifactId>sofaboot-enterprise-dependencies</artifactId>
			    <version>3.3.0</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>com.alibaba.cloud</groupId>
				<artifactId>spring-cloud-alibaba-dependencies</artifactId>
				<version>2.2.1.RELEASE</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>Hoxton.SR9</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	
	<build>
		<!--最终打包名-->
		<finalName>${project.artifactId}-${project.version}</finalName>
		<!-- 需要被打包资源目录配置 -->
		<resources>
		    <resource>
		        <directory>src/main/resources</directory>
		        <filtering>false</filtering>
		        <includes>
		            <include>**/*.xml</include>
		            <include>**/*.yml</include>
		            <include>**/*.properties</include>
		        </includes>
		    </resource>
		</resources>
		<plugins>
			<!--打包加GMT+8时间插件(默认是UTC时间少8小时)-->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>buildnumber-maven-plugin</artifactId>
				<version>1.4</version>
				<configuration>
					<timestampFormat>yyyyMMddHHmmss</timestampFormat>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>create-timestamp</goal>
						</goals>
					</execution>
				</executions>
				<inherited>false</inherited>
			</plugin>
			<!-- 将需要复制的文件复制到指定路径（例：将配置文件提取到指定路径） -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<!-- 复制配置文件 -->
					<execution>
						<id>copy-resources</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<!-- 复制哪些目录下的哪些文件到指定目录 -->
							<resources>
								<resource>
									<directory>src/main/resources</directory>
									<!-- 不配置excludes\includes默认就是复制指定目录的所有文件 -->
									<includes>
										<include>*.xml</include>
										<include>*.yml</include>
										<include>*.properties</include>
										<include>**/*.xml</include>
							            <include>**/*.yml</include>
							            <include>**/*.properties</include>
									</includes>
								</resource>
							</resources>
							<outputDirectory>${project.build.directory}/${output.resource.file.path}</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			
			<!-- 编译插件： 如果你的Pom中继承了Spring-boot-start-parent,用这个打包 -->
			<plugin>
			    <!-- 指定maven编译的jdk版本,如果不指定,maven3默认用jdk 1.5 maven2默认用jdk1.3 -->
			    <groupId>org.apache.maven.plugins</groupId>
			    <artifactId>maven-compiler-plugin</artifactId>
			    <configuration>
			        <!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中不能使用低版本jdk中不支持的语法)，会存在target不同于source的情况 -->
			        <!-- 源代码使用的JDK版本 -->
			        <source>${maven.compiler.source}</source>
			        <!-- 需要生成的目标class文件的编译版本 -->
					<target>${maven.compiler.target}</target>
					<!-- 字符集编码 -->
			        <encoding>UTF-8</encoding>
			        <!-- 跳过测试 -->
			        <skip>true</skip>
			        <fork>true</fork>
			        <verbose>true</verbose>
			        <showWarnings>true</showWarnings>
			        <!-- 要使compilerVersion标签生效，还需要将fork设为true，用于明确表示编译版本配置的可用 -->
			        <fork>true</fork>
			        <!-- 使用指定的javac命令-->
			        <!-- 例如：<executable>${JAVA_1_4_HOME}/bin/javac</executable> -->
			        <executable><!-- path-to-javac --></executable>
			        <!-- 指定插件将使用的编译器的版本 -->
			        <compilerVersion>1.8</compilerVersion>
			        <!-- 编译器使用的初始内存 -->
			        <meminitial>128m</meminitial>
			        <!-- 编译器使用的最大内存 -->
			        <maxmem>512m</maxmem>
			        <!-- 这个选项用来传递编译器自身不包含但是却支持的参数选项 -->
			        <!--<compilerArgument>-verbose -bootclasspath ${java.home}\lib\rt.jar</compilerArgument>-->
			    </configuration>                                                                                                                          
			</plugin>


			<!--移除配置文件将其不打包进jar包中，并可以将打包后的jar包输出到指定路径 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					 <!-- 剔除配置文件或目录:注意从编译结果目录开始算目录结构excludes\includes 是根据编译后的classes这个路径计算的-->
					<excludes>
					     <!-- 剔除指定后缀配置文件 -->
						<exclude>*.properties</exclude>
						<exclude>*.yml</exclude>
						<exclude>*/*.properties</exclude>
						<exclude>*/*.yml</exclude>
						<!-- 剔除指定目录 -->
						<exclude>/static/**</exclude>
                        <exclude>/mapper/**</exclude>
                        <exclude>/templates/**</exclude>
					</excludes>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<!-- MANIFEST.MF 中 Class-Path 各个依赖加入前缀 -->
							<!--lib文件夹内容，需要 maven-dependency-plugin插件补充 (依赖包剥离位置)-->
							<classpathPrefix>${output.dependence.file.path}</classpathPrefix>
							<!-- jar包不包含唯一版本标识 -->
							<useUniqueVersions>false</useUniqueVersions>
							<!--指定入口类 -->
							<!--<mainClass>com.aig.paofenpay.cache.CacheApplication</mainClass>-->
						</manifest>
						<manifestEntries>
							<!--MANIFEST.MF 中 Class-Path 加入自定义路径，多个路径用空格隔开 -->
							<!--此处resources文件夹的内容，需要maven-resources-plugin插件补充上 (配置文件剥离位置)-->
							<Class-Path>./${output.resource.file.path}</Class-Path>
						</manifestEntries>
					</archive>
					<!--输出目录-->
					<outputDirectory>${project.build.directory}</outputDirectory>
				</configuration>
			</plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.1</version>
            	<configuration>
                    <attach>true</attach>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
            	</executions>
            </plugin>

			<!-- 将依赖包导出到指定文件夹 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
						<!--依赖包的输出路径-->	
						   <outputDirectory>${project.build.directory}/${output.dependence.file.path}</outputDirectory>
						</configuration>
					</execution>
					<execution>
			            <id>attach-sources</id>
			            <goals>
			              	<goal>sources</goal>
			            </goals>
			        </execution>
				</executions>
			</plugin>

			<!--maven打包时，跳过测试-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>

			<!-- 指定多个源代码目录、多个资源文件目录 -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/main/java</source>
								<source>src/main/library</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>